


server {
  listen 5500;
  # server_name www.domain1.com;
  # root ~/data/apps/h5;
  root /Users/dwd/docker/data/h5;

  location / {
    # proxy_pass http://www.domain2.com; # 反向代理
    # proxy_pass http://www.baidu.com; # 反向代理
    # proxy_cookie_domain www.domain2.com www.domain1.com; # 修改cookie里域名
    index index.html index.htm;

    # 当用 webpack-dev-server 等中间件代理接口访问nignx时，
    # 此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用
    # 当前端只跨域不带cookie时，可为*
    # add_header Access-Control-Allow-Origin http://www.domain1.com;
    # add_header Access-Control-Allow-Credentials true;
  }
}

upstream www.domain2.com {
  server 10.0.6.206:8888 weight=1;
}
# upstream www.domain1.com {
#   server 10.0.6.206:5510 weight=1;
# }

# www.domain1.com/index.html 访问同域名下 api，经 nginx 反向代理到 www.domain2.com

server {
  listen 5510;
  server_name www.domain1.com;
  # root ~/data/apps/h5;
  # root /Users/dwd/docker/data/h5;

  location / {
    proxy_pass http://www.domain2.com; # 反向代理
    # proxy_pass http://www.baidu.com; # 反向代理
    proxy_cookie_domain www.domain2.com www.domain1.com; # 修改cookie里域名
    index index.html index.htm;

    # 当用 webpack-dev-server 等中间件代理接口访问nignx时，
    # 此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用
    # 当前端只跨域不带cookie时，可为*
    add_header Access-Control-Allow-Origin http://www.domain1.com:5500;
    add_header Access-Control-Allow-Credentials true;
  }
}
